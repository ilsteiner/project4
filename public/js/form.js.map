{"version":3,"sources":["clone-form-td.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"form.js","sourcesContent":["/* The below is a modified version */\n/*\nAuthor: Tristan Denyer (based on Charlie Griefer's original clone code, and some great help from Dan - see his comments in blog post)\nPlugin repo: https://github.com/tristandenyer/Clone-section-of-form-using-jQuery\nDemo at http://tristandenyer.com/using-jquery-to-duplicate-a-section-of-a-form-maintaining-accessibility/\nVer: 0.9.5.0\nLast updated: Oct 23, 2015\n\nThe MIT License (MIT)\n\nCopyright (c) 2011 Tristan Denyer\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n$(function () {\n    $('#btnAdd').click(function () {\n        var num     = $('.clonedInput').length, // Checks to see how many \"duplicatable\" input fields we currently have\n            newNum  = new Number(num + 1),      // The numeric ID of the new input field being added, increasing by 1 each time\n            newElem = $('#relationship' + num).clone().attr('id', 'relationship' + newNum).fadeIn('slow'); // create the new element via clone(), and manipulate it's ID using newNum value\n        console.log(num);\n    /*  This is where we manipulate the name/id values of the input inside the new, cloned element\n        Below are examples of what forms elements you can clone, but not the only ones.\n        There are 2 basic structures below: one for an H2, and one for form elements.\n        To make more, you can copy the one for form elements and simply update the classes for its label and input.\n        Keep in mind that the .val() method is what clears the element when it gets cloned. Radio and checkboxes need .val([]) instead of .val('').\n    */\n        // H2 - section\n        //newElem.find('.heading-reference').attr('id', 'ID' + newNum + '_reference').attr('name', 'ID' + newNum + '_reference').html('Entry #' + newNum);\n\n        // Name - text\n        newElem.find('.rel_name_lbl').attr('for', 'rel_name_' + newNum);\n        newElem.find('.rel_name').attr('id', 'rel_name_' + newNum).val('');\n\n        // Related to - select\n        newElem.find('.rel_is_related_to_lbl').attr('for', 'rel_is_related_to_' + newNum);\n        newElem.find('.rel_is_related_to').attr('id', 'rel_is_related_to_' + newNum).val('');\n\n        // Description - text area\n        newElem.find('.rel_description_lbl').attr('for', 'rel_description_' + newNum);\n        newElem.find('.rel_description').attr('id', 'rel_description_' + newNum).val('');\n\n        // Skate - radio\n        // newElem.find('.label_radio').attr('for', 'ID' + newNum + '_radioitem');\n        // newElem.find('.input_radio').attr('id', 'ID' + newNum + '_radioitem').attr('name', 'ID' + newNum + '_radioitem').val([]);\n\n        // Email - text\n        //newElem.find('.label_email').attr('for', 'ID' + newNum + '_email_address');\n        //newElem.find('.input_email').attr('id', 'ID' + newNum + '_email_address').attr('name', 'ID' + newNum + '_email_address').val('');\n\n    // Insert the new element after the last \"duplicatable\" input field\n        $('#relationship' + num).after(newElem);\n        $('#rel_name_' + newNum).focus();\n\n    // Enable the \"remove\" button. This only shows once you have a duplicated section.\n        $('#btnDel').attr('disabled', false);\n\n    // Right now you can only add 4 sections, for a total of 5. Change '5' below to the max number of sections you want to allow.\n        if (newNum == 5)\n        $('#btnAdd').attr('disabled', true).prop('value', \"You've reached the limit\"); // value here updates the text in the 'add' button when the limit is reached \n    });\n\n    $('#btnDel').click(function () {\n    // Confirmation dialog box. Works on all desktop browsers and iPhone.\n        if (confirm(\"Are you sure you wish to remove this section? This cannot be undone.\"))\n            {\n                var num = $('.clonedInput').length;\n                // how many \"duplicatable\" input fields we currently have\n                $('#relationship' + num).slideUp('slow', function () {$(this).remove();\n                // if only one element remains, disable the \"remove\" button\n                    if (num -1 === 1)\n                $('#btnDel').attr('disabled', true);\n                // enable the \"add\" button\n                $('#btnAdd').attr('disabled', false).prop('value', \"add section\");});\n            }\n        return false; // Removes the last section you added\n    });\n    // Enable the \"add\" button\n    $('#btnAdd').attr('disabled', false);\n    // Disable the \"remove\" button\n    $('#btnDel').attr('disabled', true);\n});"]}